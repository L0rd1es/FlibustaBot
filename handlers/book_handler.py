import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from services.service import get_book_details, download_book
from services.db import get_user_settings
from utils.utils import sanitize_filename, shorten_title
from utils.chat_actions import set_upload_document_action, run_with_periodic_action
from config import MAX_TITLE_LENGTH

logger = logging.getLogger(__name__)

async def send_book_details_message(update: Update, context: ContextTypes.DEFAULT_TYPE, details: dict) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ –∫–Ω–∏–≥–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞.

    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    :param details: –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–Ω–∏–≥–∏.
    :return: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    parts = []
    title = details.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    parts.append(f"üìö <i><b>{title}</b></i>")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    if details.get("author"):
        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        parts.append(f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {details['author']}")  # –ê–≤—Ç–æ—Ä
    if details.get("year"):
        parts.append(f"üìÖ <b>–ì–æ–¥:</b> {details['year']}")  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
    if details.get("annotation"):
        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        parts.append(f"üìù <i>{details['annotation']}</i>")  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è

    caption = "\n".join(parts)

    formats = details.get("formats", [])
    if not formats:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã", callback_data="no-op")]])
    else:
        row = [InlineKeyboardButton(fmt, callback_data=f"choose_format|{details['id']}|{fmt}") for fmt in formats]
        keyboard = InlineKeyboardMarkup([row])

    if details.get("cover_url"):
        try:
            msg = await update.message.reply_photo(
                photo=details["cover_url"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É –ø–æ URL: {e}")
            msg = await update.message.reply_text(
                text=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
    else:
        msg = await update.message.reply_text(
            text=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    return msg.message_id

async def choose_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏.

    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    await set_upload_document_action(update, context)
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ query.answer(): {e}")

    data = query.data
    parts = data.split("|")

    if len(parts) != 3 or parts[0] != "choose_format":
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback: {data}")
        if query.message:
            try:
                await query.message.reply_text("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        return

    _, book_id, fmt = parts

    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (inline) –¥–ª—è book_id {book_id}")
        file_data = await run_with_periodic_action(
            download_book(book_id, fmt),
            update,
            context,
            action=ChatAction.UPLOAD_DOCUMENT,
            interval=4
        )
        if not file_data:
            raise ValueError("–§–∞–π–ª –∫–Ω–∏–≥–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (inline) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è book_id {book_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏ {book_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {fmt}: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏.")
        return

    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ (inline) –¥–ª—è book_id {book_id}")
        details = await run_with_periodic_action(
            get_book_details(book_id),
            update,
            context,
            action=ChatAction.UPLOAD_DOCUMENT,
            interval=4
        )
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ (inline) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è book_id {book_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ –¥–ª—è book_id {book_id}: {e}")
        details = {"title": f"book_{book_id}", "author": ""}

    title = details.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    author = details.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    try:
        user_settings = await get_user_settings(query.from_user.id)
        naming = user_settings.get("preferred_book_naming", "title_author")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        naming = "title_author"

    shortened_title = shorten_title(title, MAX_TITLE_LENGTH)

    name_options = {
        "title": f"{shortened_title}",
        "title_id": f"{shortened_title}_{book_id}",
        "title_author": f"{shortened_title}_{author}",
        "title_author_id": f"{shortened_title}_{author}_{book_id}"
    }
    fname = name_options.get(naming, f"{shortened_title}_{author}")

    try:
        filename = f"{sanitize_filename(fname)}.{fmt}"
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ '{fname}': {e}")
        filename = f"book_{book_id}.{fmt}"

    chat_id = query.message.chat.id
    try:
        await context.bot.send_document(chat_id=chat_id, document=file_data, filename=filename)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        try:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")