import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from services.service import search_books_and_authors, get_book_details, download_book
from services.db import get_user_settings
from config import SEARCH_RESULTS_PER_PAGE
from utils.chat_actions import set_typing_action, run_with_periodic_action
from utils.pagination import build_page_text, build_pagination_kb
from handlers.author_handler import author_books_command
from handlers.book_handler import send_book_details_message
from utils.state import set_author_mapping, set_user_search_data, get_user_ephemeral_mode, clear_user_ephemeral_mode
from utils.utils import send_or_edit_message

logger = logging.getLogger(__name__)

async def handle_download_command(book_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏.

    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–∏–≥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏ –∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –∫–Ω–∏–≥—É –≤–º–µ—Å—Ç–µ —Å –µ—ë –¥–µ—Ç–∞–ª—è–º–∏, –∏–Ω–∞—á–µ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        book_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–Ω–∏–≥–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π.
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    if not book_id.isdigit():
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ –¥–ª—è book_id {book_id}")
        details = await run_with_periodic_action(
            get_book_details(book_id), update, context,
            action=ChatAction.TYPING, interval=4
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏:")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É.")
        return

    user_id = update.effective_user.id
    settings = await get_user_settings(user_id)
    preferred_format = settings.get("preferred_format")

    if preferred_format and (preferred_format in details["formats"]):
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ book_id {book_id} –≤ —Ñ–æ—Ä–º–∞—Ç–µ {preferred_format}")
            file_data = await run_with_periodic_action(
                download_book(book_id, preferred_format),
                update,
                context,
                action=ChatAction.UPLOAD_DOCUMENT,
                interval=4
            )
            await send_book_details_message(update, context, details)
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file_data,
                filename=f"{details['title'][:50]}_{book_id}.{preferred_format}",
                caption=f"{details['title']}\n–ê–≤—Ç–æ—Ä: {details['author']}"
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏:")
            await send_book_details_message(update, context, details)
    else:
        await send_book_details_message(update, context, details)

def build_response_text(books: list, authors: list) -> str:
    response_lines = []
    if authors:
        response_lines.append(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: {len(authors)}\n")
        for author in authors:
            response_lines.append(
                f"{author['name']} - {author['book_count']} –∫–Ω–∏–≥\n–ö–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞: /author{author['id']}\n\n"
            )
    if books:
        response_lines.append(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}\n")
        for book in books:
            response_lines.append(
                f"{book['title']}\n{book['author']}\n–°–∫–∞—á–∞—Ç—å: /download{book['id']}\n\n"
            )
    return "".join(response_lines)

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
      - –ó–∞–≥—Ä—É–∑–∫—É –∫–Ω–∏–≥–∏ (/download)
      - –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∫–Ω–∏–≥
      - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥
    """
    await set_typing_action(update, context)
    text = update.message.text.strip()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    logger.info(f"{user_id}:{chat_id} -> {text}")

    if text.startswith("/download"):
        book_id = text.removeprefix("/download").strip()
        await handle_download_command(book_id, update, context)
        return

    if text.startswith("/author") and text[7:].isdigit():
        await author_books_command(update, context)
        return

    try:
        mode = get_user_ephemeral_mode(user_id)
        if mode is None:
            settings = await get_user_settings(user_id)
            mode = settings.get("preferred_search_mode") or "general"

        data = await search_books_and_authors(text, mode)
        clear_user_ephemeral_mode(user_id)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥ –∏ –∞–≤—Ç–æ—Ä–æ–≤:")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        return

    books = data.get("books_found", [])
    authors = data.get("authors_found", [])

    if authors:
        for author in authors:
            set_author_mapping(author["id"], author["name"])

    if not books and not authors:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response_lines = []
    if authors:
        response_lines.append(f"üìñ <b>–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤:</b> {len(authors)}\n")
        for author in authors:
            response_lines.append(
                f"‚Ä¢ <b>{author['name']}</b> ‚Äî {author['book_count']} –∫–Ω–∏–≥\n"
                f"  <u>/author{author['id']}</u>\n\n"
            )
    if books:
        response_lines.append(f"üìö <b>–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥:</b> {len(books)}\n")
        for book in books:
            response_lines.append(
                f"‚Ä¢ <b>{book['title']}</b>\n"
                f"  –ê–≤—Ç–æ—Ä: <i>{book['author']}</i>\n"
                f"  –°–∫–∞—á–∞—Ç—å: <u>/download{book['id']}</u>\n\n"
            )

    total_pages = (len(response_lines) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
    set_user_search_data(user_id, response_lines, total_pages)

    page_text = build_page_text(user_id)
    pagination_keyboard = build_pagination_kb(user_id)
    await send_or_edit_message(update, page_text, reply_markup=pagination_keyboard)
