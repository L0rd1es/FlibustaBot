# handlers/book_handler.py

import logging
from typing import Iterable, List, Sequence

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatAction
from telegram.ext import ContextTypes

from services.service import get_book_details, download_book
from services.db import get_user_settings
from utils.utils import sanitize_filename, shorten_title
from utils.chat_actions import set_upload_document_action, run_with_periodic_action
from config import MAX_TITLE_LENGTH

logger = logging.getLogger(__name__)

CAPTION_LIMIT = 1024  # –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞ –≤ Telegram


def _chunk(seq: Sequence[str], size: int) -> Iterable[List[str]]:
    for i in range(0, len(seq), size):
        yield list(seq[i : i + size])


def _trim_caption_for_photo(text: str, limit: int = CAPTION_LIMIT) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥—Ä–µ–∑–∞–µ—Ç caption –ø–æ–¥ –ª–∏–º–∏—Ç Telegram (1024)."""
    if len(text) <= limit:
        return text
    hard_limit = max(0, limit - 3)
    return text[:hard_limit] + "‚Ä¶"


async def _safe_reply_text(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    reply_markup: InlineKeyboardMarkup | None = None,
) -> int:
    """–ü–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –ª–∏–±–æ —á–µ—Ä–µ–∑ message.reply_text, –ª–∏–±–æ –≤ —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id."""
    if update.message:
        msg = await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        return msg.message_id
    if update.effective_chat:
        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id, text=text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
        )
        return msg.message_id
    logger.warning("–ù–µ—Ç –Ω–∏ message, –Ω–∏ effective_chat ‚Äî –Ω–µ–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç.")
    return 0


async def _safe_reply_photo(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    photo: str,
    caption: str,
    reply_markup: InlineKeyboardMarkup | None = None,
) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id."""
    cap = _trim_caption_for_photo(caption)
    try:
        if update.message:
            msg = await update.message.reply_photo(
                photo=photo, caption=cap, parse_mode=ParseMode.HTML, reply_markup=reply_markup
            )
            return msg.message_id
        if update.effective_chat:
            msg = await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=cap,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
            )
            return msg.message_id
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ URL (%s). –ü–∞–¥–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç: %s", photo, e)

    # fallback ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    return await _safe_reply_text(update, context, caption, reply_markup)


async def send_book_details_message(update: Update, context: ContextTypes.DEFAULT_TYPE, details: dict) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ –∫–Ω–∏–≥–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    title = details.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    parts: list[str] = [f"üìö <i><b>{title}</b></i>"]

    if details.get("author"):
        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        parts.append(f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {details['author']}")
    if details.get("year"):
        parts.append(f"üìÖ <b>–ì–æ–¥:</b> {details['year']}")
    if details.get("annotation"):
        parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        parts.append(f"üìù <i>{details['annotation']}</i>")

    caption = "\n".join(parts)

    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
    formats_raw = details.get("formats") or []
    formats = sorted(
        set(formats_raw),
        key=lambda x: ("fb2", "epub", "mobi", "pdf").index(x) if x in ("fb2", "epub", "mobi", "pdf") else 999,
    )

    if not formats:
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã", callback_data="no-op")]]
        )
    else:
        rows: list[list[InlineKeyboardButton]] = []
        for row_formats in _chunk(formats, 3):
            row = [
                InlineKeyboardButton(fmt, callback_data=f"choose_format|{details['id']}|{fmt}")
                for fmt in row_formats
            ]
            rows.append(row)
        keyboard = InlineKeyboardMarkup(rows)

    if details.get("cover_url"):
        return await _safe_reply_photo(update, context, details["cover_url"], caption, keyboard)
    else:
        return await _safe_reply_text(update, context, caption, keyboard)


async def choose_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏.
    """
    await set_upload_document_action(update, context)

    query = update.callback_query
    if not query:
        logger.error("choose_format_callback: callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    try:
        await query.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ query.answer(): %s", e)

    data = (query.data or "").strip()
    parts = data.split("|")

    if len(parts) != 3 or parts[0] != "choose_format":
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback: %s", data)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ ‚Äî –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ query.message.reply_text
        await _safe_reply_text(update, context, "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    _, book_id, fmt = parts

    # 1) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º Chat Action)
    try:
        logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", book_id, fmt)
        file_data = await run_with_periodic_action(
            download_book(book_id, fmt),
            update,
            context,
            action=ChatAction.UPLOAD_DOCUMENT,
            interval=4,
        )
        if not file_data:
            raise ValueError("–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–Ω–∏–≥–∏.")
        logger.info("–ö–Ω–∏–≥–∞ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s —Å–∫–∞—á–∞–Ω–∞", book_id, fmt)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ %s (%s): %s", book_id, fmt, e)
        await _safe_reply_text(update, context, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏.")
        return

    # 2) –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ (–¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ %s", book_id)
        details = await run_with_periodic_action(
            get_book_details(book_id),
            update,
            context,
            action=ChatAction.UPLOAD_DOCUMENT,
            interval=4,
        )
        logger.info("–î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏ %s –ø–æ–ª—É—á–µ–Ω—ã", book_id)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ %s: %s", book_id, e)
        details = {"title": f"book_{book_id}", "author": ""}

    title = details.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    author = details.get("author") or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    # 3) –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á—ë—Ç–æ–º None)
    try:
        settings = await get_user_settings(query.from_user.id)
        naming = (settings.get("preferred_book_naming") if settings else None) or "title_author"
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        naming = "title_author"

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    shortened_title = shorten_title(title, MAX_TITLE_LENGTH)
    shortened_author = shorten_title(author, MAX_TITLE_LENGTH // 2)

    name_options = {
        "title": f"{shortened_title}",
        "title_id": f"{shortened_title}_{book_id}",
        "title_author": f"{shortened_title}_{shortened_author}",
        "title_author_id": f"{shortened_title}_{shortened_author}_{book_id}",
    }
    raw_name = name_options.get(naming, f"{shortened_title}_{shortened_author}")

    try:
        filename = f"{sanitize_filename(raw_name)}.{fmt}"
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ '%s': %s", raw_name, e)
        filename = f"book_{book_id}.{fmt}"

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    chat_id: int | None = None
    if query is not None and query.message is not None and getattr(query.message, "chat", None) is not None:
        chat_id = query.message.chat.id
    elif update.effective_chat is not None:
        chat_id = update.effective_chat.id

    if chat_id is None:
        logger.error("–ù–µ—Ç chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ %s", filename)
        return

    try:
        await context.bot.send_document(chat_id=chat_id, document=file_data, filename=filename)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ %s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", filename, chat_id, e)
        await _safe_reply_text(update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
