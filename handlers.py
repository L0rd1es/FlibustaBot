import asyncio
import logging
import re
import requests
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.constants import ChatAction

from service import (
    search_books_and_authors,
    get_book_details,
    download_book,
    get_author_books,
)
from db import get_user_settings, set_user_settings
from config import (
    SEARCH_RESULTS_PER_PAGE,
    STATS_FILE,
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID –∞–≤—Ç–æ—Ä–∞ -> –∏–º—è –∞–≤—Ç–æ—Ä–∞ (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞)
author_mapping = {}

# –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è /search, /book, /author
user_ephemeral_mode = {}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
user_search_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler –¥–ª—è /settings
SETTINGS_MENU, FORMAT_MENU, MODE_MENU = range(3)

# ==================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ chat_actions
# ==================================================================
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ chat_action "–ø–µ—á–∞—Ç–∞–µ—Ç..."
async def set_typing_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.TYPING
    )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ chat_action "–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç..."
async def set_upload_document_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.UPLOAD_DOCUMENT
    )

async def periodic_chat_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, interval: float, stop_event: asyncio.Event):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π chat action, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω stop_event.
    """
    while not stop_event.is_set():
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=action
        )
        try:
            # –ñ–¥–µ–º interval —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ stop_event
            await asyncio.wait_for(stop_event.wait(), timeout=interval)
        except asyncio.TimeoutError:
            continue

async def run_with_periodic_action(coro, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str = ChatAction.TYPING, interval: float = 4):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É coro –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º chat action.
    –ö–∞–∫ —Ç–æ–ª—å–∫–æ coro –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.
    """
    stop_event = asyncio.Event()
    periodic_task = asyncio.create_task(periodic_chat_action(update, context, action, interval, stop_event))
    try:
        result = await coro
        return result
    finally:
        stop_event.set()
        await periodic_task

# ==================================================================
# –ö–æ–º–∞–Ω–¥—ã /search, /book, /author
# ==================================================================
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    user_ephemeral_mode[update.effective_user.id] = "general"
    msg = await update.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç ¬´–æ–±—â–∏–º¬ª (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ).")
    
async def book_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    user_ephemeral_mode[update.effective_user.id] = "book"
    msg = await update.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–∏–≥–∞–º (1 —Ä–∞–∑).")
    
async def author_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    user_ephemeral_mode[update.effective_user.id] = "author"
    msg = await update.message.reply_text("–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ—Ä–∞–º (1 —Ä–∞–∑).")

# ==================================================================
# –ö–æ–º–∞–Ω–¥—ã /start –∏ /help
# ==================================================================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –Ω–∞ –§–ª–∏–±—É—Å—Ç–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/search - –û–±—â–∏–π –ø–æ–∏—Å–∫ (1 —Ä–∞–∑)\n"
        "/book - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ (1 —Ä–∞–∑)\n"
        "/author - –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–æ–≤ (1 —Ä–∞–∑)\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞/—Ä–µ–∂–∏–º–∞\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å...\n"
        "–°–∫–∞—á–∞—Ç—å: /download123\n"
        "–ê–≤—Ç–æ—Ä: /author123\n"
    )
    await update.message.reply_text(text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    text = (
        "–ü–æ–º–æ—â—å:\n"
        "/start - –ù–∞—á–∞–ª–æ\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/search /book /author - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã\n\n"
        "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: /download<id>\n"
        "–ê–≤—Ç–æ—Ä: /author<id>\n"
    )
    await update.message.reply_text(text)

# ==================================================================
# /settings (ConversationHandler)
# ==================================================================
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    await show_main_settings_menu(update.effective_user.id, update)
    return SETTINGS_MENU

async def show_main_settings_menu(user_id: int, update_or_query):
    st = await get_user_settings(user_id)
    fm = st["preferred_format"] or ""
    md = st["preferred_search_mode"] or "general"
    text = (
        "–ù–ê–°–¢–†–û–ô–ö–ò:\n\n"
        f"–§–æ—Ä–º–∞—Ç: {fm if fm else '—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å'}\n"
        f"–†–µ–∂–∏–º: {md if md!='general' else '–æ–±—â–∏–π'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –º–µ–Ω—è–µ–º:"
    )
    kb = [
        [InlineKeyboardButton("–§–æ—Ä–º–∞—Ç", callback_data="settings_format")],
        [InlineKeyboardButton("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞", callback_data="settings_mode")],
    ]
    markup = InlineKeyboardMarkup(kb)
    if getattr(update_or_query, "callback_query", None):
        query = update_or_query.callback_query
        old_text = query.message.text or ""
        if old_text.strip() == text.strip():
            await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return
        await query.edit_message_text(text, reply_markup=markup)
    else:
        await update_or_query.message.reply_text(text, reply_markup=markup)

async def settings_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "settings_format":
        await show_format_menu(query.from_user.id, query)
        return FORMAT_MENU
    elif data == "settings_mode":
        await show_mode_menu(query.from_user.id, query)
        return MODE_MENU
    return SETTINGS_MENU

async def show_format_menu(user_id: int, query):
    st = await get_user_settings(user_id)
    sel = st["preferred_format"]
    display_val = "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å" if sel == "ask" else (sel or "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å")
    text_top = f"–§–æ—Ä–º–∞—Ç. –¢–µ–∫—É—â–∏–π: {display_val}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
    arr = ["—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å", "fb2", "epub", "mobi", "pdf"]
    kb = []
    for opt in arr:
        val = "ask" if opt == "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å" else opt
        text_btn = f"üîò {opt}" if val == sel else opt
        kb.append([InlineKeyboardButton(text_btn, callback_data=f"set_fmt|{opt}")])
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    await query.edit_message_text(text_top, reply_markup=InlineKeyboardMarkup(kb))

async def show_mode_menu(user_id: int, query):
    st = await get_user_settings(user_id)
    sel = st["preferred_search_mode"] or "general"
    text_top = f"–†–µ–∂–∏–º. –¢–µ–∫—É—â–∏–π: {sel if sel!='general' else '–æ–±—â–∏–π'}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
    modes = [("–æ–±—â–∏–π", "general"), ("—Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏", "book"), ("—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—ã", "author")]
    kb = []
    for (title, val) in modes:
        tbtn = f"üîò {title}" if val == sel else title
        kb.append([InlineKeyboardButton(tbtn, callback_data=f"set_mode|{val}")])
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    old_text = query.message.text or ""
    if old_text.strip() == text_top.strip():
        await query.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return
    await query.edit_message_text(text_top, reply_markup=InlineKeyboardMarkup(kb))

async def settings_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if data.startswith("set_fmt|"):
        val = data.split("|")[1]
        new_val = "ask" if val == "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å" else val
        await set_user_settings(user_id, preferred_format=new_val)
        await show_format_menu(user_id, query)
        return FORMAT_MENU
    elif data == "back_to_main":
        await show_main_settings_menu(user_id, update)
        return SETTINGS_MENU
    return FORMAT_MENU

async def settings_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if data.startswith("set_mode|"):
        val = data.split("|")[1]
        await set_user_settings(user_id, preferred_search_mode=val)
        await show_mode_menu(user_id, query)
        return MODE_MENU
    elif data == "back_to_main":
        await show_main_settings_menu(user_id, update)
        return SETTINGS_MENU
    return MODE_MENU

def get_settings_conversation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("settings", settings_command)],
        states={
            SETTINGS_MENU: [
                CallbackQueryHandler(settings_main_menu_callback, pattern=r"^(settings_format|settings_mode)$")
            ],
            FORMAT_MENU: [
                CallbackQueryHandler(settings_format_callback, pattern=r"^(set_fmt\|.*|back_to_main)$")
            ],
            MODE_MENU: [
                CallbackQueryHandler(settings_mode_callback, pattern=r"^(set_mode\|.*|back_to_main)$")
            ],
        },
        fallbacks=[],
        allow_reentry=True,
        per_message=False
    )

# ------------------------------------------------------------------
# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
# ------------------------------------------------------------------
def build_page_text(user_id: int) -> str:
    info = user_search_data[user_id]
    recs = info["records"]
    page = info["page"]
    pages = info["pages"]
    start_i = (page - 1) * SEARCH_RESULTS_PER_PAGE
    end_i = start_i + SEARCH_RESULTS_PER_PAGE
    chunk = recs[start_i:end_i]
    lines = [f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}", ""]
    lines.extend(chunk)
    return "\n".join(lines)

def build_pagination_kb(user_id: int):
    info = user_search_data[user_id]
    page = info["page"]
    pages = info["pages"]
    if pages <= 1:
        return None
    btn_prev = InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="pagination|PREV") if page > 1 else InlineKeyboardButton(" ", callback_data="no-op")
    btn_next = InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data="pagination|NEXT") if page < pages else InlineKeyboardButton(" ", callback_data="no-op")
    row = [btn_prev, InlineKeyboardButton(f"{page}/{pages}", callback_data="no-op"), btn_next]
    return InlineKeyboardMarkup([row])

async def pagination_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if user_id not in user_search_data:
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    info = user_search_data[user_id]
    if data == "pagination|NEXT" and info["page"] < info["pages"]:
        info["page"] += 1
    elif data == "pagination|PREV" and info["page"] > 1:
        info["page"] -= 1
    new_text = build_page_text(user_id)
    new_kb = build_pagination_kb(user_id)
    await query.edit_message_text(new_text, reply_markup=new_kb)

# ------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /authorNNN => –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞
# ------------------------------------------------------------------
async def author_books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    text = update.message.text.strip()
    user_id = update.effective_user.id
    m = re.match(r"/author(\d+)$", text)
    if not m:
        msg = await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /author12345")
        return
    author_id = m.group(1)
    default_author = author_mapping.get(author_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    try:
        bks = await get_author_books(author_id, default_author=default_author)
    except Exception as e:
        logger.error(e)
        msg = await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞.")
        return
    if not bks:
        msg = await update.message.reply_text("–£ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –∫–Ω–∏–≥ –∏–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    recs = []
    for b in bks:
        recs.append(f"{b['title']}\n{b['author']}\n–°–∫–∞—á–∞—Ç—å: /download{b['id']}\n")
    total = len(recs)
    pages = (total + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
    user_search_data[user_id] = {"records": recs, "page": 1, "pages": pages}
    txt = build_page_text(user_id)
    kb = build_pagination_kb(user_id)
    await update.message.reply_text(txt, reply_markup=kb)

# ------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ------------------------------------------------------------------
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_typing_action(update, context)
    text = update.message.text.strip()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    with open(STATS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{user_id}:{chat_id} -> {text}\n")
    if text.startswith("/download"):
        book_id = text.removeprefix("/download").strip()
        if not book_id.isdigit():
            m = await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
            return
        try:
            det = await run_with_periodic_action(
                get_book_details(book_id), update, context,
                action=ChatAction.TYPING, interval=4
            )
        except Exception as e:
            logger.error(e)
            mm = await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É.")
            return
        st = await get_user_settings(user_id)
        pfmt = st["preferred_format"]
        if pfmt and (pfmt in det["formats"]):
            try:
                file_data = await download_book(book_id, pfmt)
                img_msg_id = await send_book_details_message(update, context, det)
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=file_data,
                    filename=f"{det['title'][:50]}_{book_id}.{pfmt}",
                    caption=f"{det['title']}\n–ê–≤—Ç–æ—Ä: {det['author']}"
                )
            except Exception as e:
                logger.error(e)
                mid = await send_book_details_message(update, context, det)
        else:
            await send_book_details_message(update, context, det)
        return

    if text.startswith("/author") and text[7:].isdigit():
        await author_books_command(update, context)
        return

    try:
        st = await get_user_settings(user_id)
        mode = st["preferred_search_mode"] if st["preferred_search_mode"] else "general"
        data = await search_books_and_authors(text, mode)
    except Exception as e:
        logger.error(e)
        mm = await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        return
    bks = data["books_found"]
    auts = data["authors_found"]
    if auts:
        for a in auts:
            author_mapping[a["id"]] = a["name"]
    if not bks and not auts:
        mm = await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    recs = []
    if auts:
        recs.append(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: {len(auts)}\n")
        for a in auts:
            recs.append(f"{a['name']} - {a['book_count']} –∫–Ω–∏–≥\n–ö–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞: /author{a['id']}\n")
    if bks:
        recs.append(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(bks)}\n")
        for b in bks:
            recs.append(f"{b['title']}\n{b['author']}\n–°–∫–∞—á–∞—Ç—å: /download{b['id']}\n")
    total = len(recs)
    pages = (total + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE
    user_search_data[user_id] = {"records": recs, "page": 1, "pages": pages}
    txt = build_page_text(user_id)
    kb = build_pagination_kb(user_id)
    await update.message.reply_text(txt, reply_markup=kb)

# ------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
# ------------------------------------------------------------------
async def send_book_details_message(update: Update, context: ContextTypes.DEFAULT_TYPE, details: dict):
    parts = []
    parts.append(details["title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    if details["author"]:
        parts.append(f"–ê–≤—Ç–æ—Ä: {details['author']}")
    if details.get("year"):
        parts.append(f"–ì–æ–¥: {details['year']}")
    if details.get("annotation"):
        parts.append(f"\n{details['annotation']}")
    cap = "\n".join(parts)
    fmts = details.get("formats", [])
    if fmts:
        row = [InlineKeyboardButton(f, callback_data=f"choose_format|{details['id']}|{f}") for f in fmts]
        kb = InlineKeyboardMarkup([row])
    else:
        kb = None
    cover = None
    if details.get("cover_url"):
        try:
            r = requests.get(details["cover_url"], timeout=10)
            if r.status_code == 200:
                cover = r.content
        except:
            pass
    if cover:
        msg = await update.message.reply_photo(
            photo=cover,
            caption=cap,
            parse_mode="HTML",
            reply_markup=kb
        )
    else:
        msg = await update.message.reply_text(
            text=cap,
            parse_mode="HTML",
            reply_markup=kb
        )
    return msg.message_id

# ------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
# ------------------------------------------------------------------
async def choose_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_upload_document_action(update, context)
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ query.answer(): {e}")
    data = query.data
    _, book_id, fmt = data.split("|")
    try:
        file_data = await run_with_periodic_action(
            download_book(book_id, fmt),
            update,
            context,
            action=ChatAction.UPLOAD_DOCUMENT,
            interval=4
        )
    except Exception as e:
        logger.error(e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏.")
        return
    try:
        d = await get_book_details(book_id)
        t = d["title"][:50] if d["title"] else "book"
        a = d["author"] or ""
        cpt = f"{t}\n–ê–≤—Ç–æ—Ä: {a}"
    except:
        t = f"book_{book_id}"
        cpt = t
    filename = f"{t}_{book_id}.{fmt}"
    await context.bot.send_document(
        chat_id=query.message.chat_id,
        document=file_data,
        filename=filename,
        caption=cpt
    )

    
async def no_op_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer("")
