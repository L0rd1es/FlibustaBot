# handlers/message_handler.py

import logging
import re
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction

from services.service import search_books_and_authors, get_book_details, download_book
from services.db import get_user_settings
from config import SEARCH_RESULTS_PER_PAGE
from utils.chat_actions import set_typing_action, run_with_periodic_action
from utils.pagination import build_page_text, build_pagination_kb
from handlers.author_handler import author_books_command
from handlers.book_handler import send_book_details_message
from utils.state import (
    set_author_mapping,
    set_user_search_data,
    get_user_ephemeral_mode,
    clear_user_ephemeral_mode,
)
from utils.utils import send_or_edit_message

logger = logging.getLogger(__name__)


async def _safe_reply_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è message."""
    try:
        if update.message is not None:
            await update.message.reply_text(text)
            return
        if update.effective_chat is not None:
            await context.bot.send_message(update.effective_chat.id, text)
            return
        if update.effective_user is not None:
            await context.bot.send_message(update.effective_user.id, text)
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)


async def handle_download_command(book_id: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ –ø–æ ID: —É—á–∏—Ç—ã–≤–∞–µ—Ç preferred_format, —à–ª—ë—Ç –∫–∞—Ä—Ç–æ—á–∫—É + —Ñ–∞–π–ª (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)."""
    if not book_id.isdigit():
        await _safe_reply_text(update, context, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ book_id=%s", book_id)
        details = await run_with_periodic_action(
            get_book_details(book_id),
            update,
            context,
            action=ChatAction.TYPING,
            interval=4,
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏")
        await _safe_reply_text(update, context, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É.")
        return

    user = update.effective_user
    user_id = user.id if user else 0
    settings = await get_user_settings(user_id)
    preferred_format = settings.get("preferred_format")

    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∫–∞—á–∞–µ–º —Ñ–∞–π–ª
    if preferred_format and preferred_format in details.get("formats", []):
        try:
            logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s", book_id, preferred_format)
            file_data = await run_with_periodic_action(
                download_book(book_id, preferred_format),
                update,
                context,
                action=ChatAction.UPLOAD_DOCUMENT,
                interval=4,
            )
            # –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
            await send_book_details_message(update, context, details)

            chat_id = update.effective_chat.id if update.effective_chat else user_id
            await context.bot.send_document(
                chat_id=chat_id,
                document=file_data,
                filename=f"{details.get('title','book')[:50]}_{book_id}.{preferred_format}",
                caption=f"{details.get('title','')}\n–ê–≤—Ç–æ—Ä: {details.get('author','')}",
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏")
            await send_book_details_message(update, context, details)
    else:
        await send_book_details_message(update, context, details)


def _build_response_lines(books: list, authors: list) -> list[str]:
    """–ì–æ—Ç–æ–≤–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)."""
    lines: list[str] = []
    if authors:
        lines.append(f"üìñ <b>–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤:</b> {len(authors)}\n")
        for a in authors:
            lines.append(
                f"‚Ä¢ <b>{a['name']}</b> ‚Äî {a['book_count']} –∫–Ω–∏–≥\n"
                f"  <u>/author{a['id']}</u>\n\n"
            )
    if books:
        lines.append(f"üìö <b>–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥:</b> {len(books)}\n")
        for b in books:
            lines.append(
                f"‚Ä¢ <b>{b['title']}</b>\n"
                f"  –ê–≤—Ç–æ—Ä: <i>{b['author']}</i>\n"
                f"  –°–∫–∞—á–∞—Ç—å: <u>/download{b['id']}</u>\n\n"
            )
    return lines


async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - /download<ID>[@...]
    - /author<ID>[@...]
    - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    """
    await set_typing_action(update, context)

    if update.message is None or update.message.text is None:
        await _safe_reply_text(update, context, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    text = update.message.text.strip()
    # ‚úÇÔ∏è —É–±–∏—Ä–∞–µ–º @... –µ—Å–ª–∏ –µ—Å—Ç—å
    if "@" in text:
        text = text.split("@", 1)[0]

    user = update.effective_user
    chat = update.effective_chat
    user_id = user.id if user else 0
    chat_id = chat.id if chat else 0
    logger.info("%s:%s -> %s", user_id, chat_id, text)

    # --- /download<ID> ---
    m = re.match(r"^/download(\d+)$", text, re.IGNORECASE)
    if m:
        book_id = m.group(1)
        await handle_download_command(book_id, update, context)
        return

    # --- /author<ID> ---
    if text.lower().startswith("/author"):
        await author_books_command(update, context)
        return

    # --- –ü–æ–∏—Å–∫ ---
    try:
        mode = get_user_ephemeral_mode(user_id)
        if mode is None:
            settings = await get_user_settings(user_id)
            mode = settings.get("preferred_search_mode") or "general"

        data = await search_books_and_authors(text, mode)
        clear_user_ephemeral_mode(user_id)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥ –∏ –∞–≤—Ç–æ—Ä–æ–≤")
        await _safe_reply_text(update, context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        return

    books = data.get("books_found", [])
    authors = data.get("authors_found", [])

    if authors:
        for a in authors:
            set_author_mapping(a["id"], a["name"])

    if not books and not authors:
        await _safe_reply_text(update, context, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    lines = _build_response_lines(books, authors)
    total_pages = max(1, (len(lines) + SEARCH_RESULTS_PER_PAGE - 1) // SEARCH_RESULTS_PER_PAGE)
    set_user_search_data(user_id, lines, total_pages)

    page_text = build_page_text(user_id)
    kb = build_pagination_kb(user_id)

    await send_or_edit_message(update, page_text, reply_markup=kb)
